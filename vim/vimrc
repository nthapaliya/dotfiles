" .vimrc
"
" vim-plug auto-install and plugin list
"
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

Plug 'bling/vim-airline'
Plug 'bling/vim-bufferline'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'

Plug 'scrooloose/syntastic'

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rbenv'

Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'

Plug 'altercation/vim-colors-solarized'
Plug 'vim-ruby/vim-ruby'
Plug 'isRuslan/vim-es6'
Plug 'fatih/vim-go'
Plug 'rodjek/vim-puppet'

call plug#end()

" Simple tweaks
syntax on
syntax enable
filetype plugin indent on

set shell=$SHELL
set background=dark
set number
set nocompatible
set smartcase
set title
set visualbell           " don't beep
set noerrorbells         " don't beep
set hidden
set cursorline
" tab-settings
set ts=2 sts=2 sw=2 expandtab

" my custom mappings
let mapleader = "\<Space>"
inoremap jk <esc>
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

nnoremap <left> :bn<cr>
nnoremap <right> :bp<cr>

nnoremap <enter> o<esc>


" to clean up trailing whitespace
nnoremap <leader>W  :%s/\s\+$<cr>

function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <leader>n :call NumberToggle()<cr>
nnoremap <C-p> :Files<cr>

if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif

" Colorscheme etc
colorscheme solarized

" vim-go
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

let g:bufferline_echo = 0

if $COMPATIBILITY
  let g:airline_powerline_fonts = 0

  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " unicode symbols
  let g:airline_left_sep = ' '
  let g:airline_right_sep = ' '
  let g:airline_symbols.crypt = 'üîí'
  let g:airline_symbols.linenr = '‚ê§'
  let g:airline_symbols.branch = '‚éá'
  let g:airline_symbols.paste = '√û'
  let g:airline_symbols.whitespace = 'Œû'
  let g:tmuxline_powerline_symbols = 0
else
  let g:airline_powerline_fonts = 1
endif

set clipboard^=unnamed "adds unnamed to existing values

if has("gui")
  set guifont=Sauce\ Code\ Powerline\ Light:h11
endif

let g:syntastic_scss_checkers = ['scss_lint']

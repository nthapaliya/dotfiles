" .vimrc

" vim-plug autodownload {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}

" vim-plug config {{{

call plug#begin('~/.vim/plugged')

" Colors and themes
Plug 'vim-airline/vim-airline'
Plug 'morhetz/gruvbox'

" Ruby
" Plug 'janko-m/vim-test'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rbenv'
Plug 'vim-ruby/vim-ruby'

" Javascript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'

" Other languages
Plug 'fatih/vim-go'
Plug 'rodjek/vim-puppet'
Plug 'tmux-plugins/vim-tmux'
Plug 'vim-scripts/Arduino-syntax-file'

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'

" Vim enhancements
Plug 'ConradIrwin/vim-bracketed-paste' " TODO: Find out if I still need this
Plug 'airblade/vim-gitgutter'          " show git marks on gutter
Plug 'airblade/vim-rooter'             " vim opened in a sub-dir chdir's to git root
Plug 'christoomey/vim-tmux-navigator'  " jump between vim and tmux panes easily
Plug 'tommcdo/vim-lion'                " easily align things
Plug 'tpope/vim-commentary'            " gc and gcc to comment/uncomment lines
Plug 'tpope/vim-dispatch'              " TODO: actually use this for anything
Plug 'tpope/vim-fugitive'              " git wrapper
Plug 'tpope/vim-repeat'                " extends . commands
Plug 'tpope/vim-rhubarb'               " extends fugitive for use with github
Plug 'tpope/vim-sensible'              " sensible defaults
Plug 'tpope/vim-surround'              " shortcuts for adding deleting or changing parens and quotes
Plug 'tpope/vim-unimpaired'            " handy shortcuts which I can never remember
Plug 'tpope/vim-vinegar'               " wrapper around netrw, file manager
Plug 'unblevable/quick-scope'          " handy for f and t commands

" Plug 'justinmk/vim-sneak'
" Plug 'ludovicchabant/vim-gutentags' " TODO: Get this working properly
" Plug 'moll/vim-bbye'
" Plug 'neomake/neomake'              " TODO: Is this any good? (or delete)
" Plug 'rizzatti/dash.vim'
" Plug 'scrooloose/syntastic'         " TODO: Make this work or delete

" Generating tmuxline and promptline
" Plug 'edkolev/tmuxline.vim'
" Plug 'edkolev/promptline.vim'

call plug#end()
" }}}

" basic settings {{{

set background=dark                            " dark theme
set clipboard^=unnamed                         " adds unnamed to existing values
set cursorline                                 " highlight the cursorline
set hidden                                     " can change buffers even if current is not written
set list                                       " enable list characters
set listchars=trail:·,extends:#,tab:▸·,nbsp:·  " specify list characters
set nocompatible                               " enable vim specific behaviour
set noerrorbells                               " don't beep
set noshowmode                                 " don't need to echo mode
set number                                     " show numbers in side gutter
set scrolloff=8                                " leave 8 lines on top and bottom while scrolling
set shell=$SHELL                               " default shell set by environment
set smartcase                                  " search case setting
set title                                      " titlebar will be buffer filename
set t_ut=                                      " https://sunaku.github.io/vim-256color-bce.html
set termguicolors                              " enable true-color
set ts=2 sts=2 sw=2 expandtab                  " tab-settings
set visualbell                                 " don't beep

colorscheme gruvbox

" set statusline=%F%m%r%h%w\ [%l/%L,\ %v]\ [%p%%]\ %=[TYPE=%Y]\ [FMT=%{&ff}]\ %{\"[ENC=\".(&fenc==\"\"?&enc:&fenc).\"]\"}

" }}}

" keymappings {{{
let mapleader = "\<Space>"

cmap w!! w !sudo tee % >/dev/null
nnoremap <leader>W  :%s/\s\+$<cr>                " to clean up trailing whitespace
nnoremap <leader>ev :e $MYVIMRC<cr>              " quickly edit vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>         " quickly source vimrc
nnoremap <leader>q  :Bdelete<CR>                 " close buffers sanely
nnoremap <leader>D  :Dispatch<cr>                " map vim-dispatch
nnoremap <Left> :bprev<cr>
nnoremap <Right> :bnext<cr>

" inoremap jk <esc>
nnoremap Q <nop>                                 " don't enter ex mode accidentally

" fzf.vim
" if $COMPATIBILITY
"   nnoremap <C-p> :Files!<cr>
" else
  nnoremap <C-p> :Files<cr>
" endif

" }}}

" gui config {{{
if has("gui_running")
  set guioptions=
  set guifont=Sauce\ Code\ Powerline\ Light:h11
endif
" }}}

" nvim config {{{
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

  " I'm not keeping this to enable true color, thats been deprecated
  " I'm keeping this to 'fix' quick-scope
  " https://github.com/unblevable/quick-scope/issues/32#issuecomment-241159662
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
" }}}

" vim-go {{{
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
" }}}

" syntastic {{{

let g:syntastic_scss_checkers = ['scss_lint']
let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "active_filetypes": ["ruby"],
      \ "passive_filetypes": ["puppet"] }

" }}}

" vim-test {{{

" nmap <silent> <leader>tn :TestNearest<CR>
" nmap <silent> <leader>tf :TestFile<CR>
" nmap <silent> <leader>ta :TestSuite<CR>
" nmap <silent> <leader>tl :TestLast<CR>
" nmap <silent> <leader>tv :TestVisit<CR>
let test#strategy = 'neovim'

" }}}

" quick-scope {{{

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" }}}

" auto-commands {{{
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END

autocmd FileType gitcommit setlocal commentstring=#\ %s
autocmd FileType diff setlocal commentstring=#\ %s

autocmd BufRead,BufNewFile *.{es6,es6.js} set filetype=javascript " set all `es6` extensions to javascript
" }}}

" custom-commands {{{
command Today execute 'normal G' | r!date "+\%F (\%a \%b \%d)"
command -nargs=+ Now execute 'normal G' | r!date "+\%R - <args>"

function Eslint()
  !node_modules/eslint/bin/eslint.js --quiet --fix %
  edit
endfunction

command Eslint call Eslint()
" }}}

" vim-airline fine tuning {{{
if $COMPATIBILITY
  let g:airline_left_sep=' '
  let g:airline_right_sep=' '
else
  let g:airline_powerline_fonts = 1
endif

let g:airline#extensions#branch#displayed_head_limit = 8

" Short forms, lets see if worth it
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ 'S'  : 'S',
    \ '' : 'S',
    \ }

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" }}}

" TODO: vim-promptline and tmuxline {{{
let g:promptline_theme =  {
        \'a'    : [235, 208],
        \'b'    : [232, 6],
        \'c'    : [15, 243],
        \'x'    : [15, 239],
        \'y'    : [15, 239],
        \'z'    : [233, 183],
        \'warn' : [235, 208]}

" https://github.com/edkolev/promptline.vim#tldr-starting-point-for-a-personalized-prompt

" let g:promptline_preset = {
"       \'b' : [ promptline#slices#user() ],
"       \'c' : [ promptline#slices#cwd() ],
"       \'x' : [ promptline#slices#vcs_branch() ],
"       \'warn' : [ promptline#slices#last_exit_code() ]}

let g:airline#extensions#tmuxline#enabled = 0

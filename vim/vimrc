" .vimrc

" vim-plug autodownload {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif
" }}}

" vim-plug config {{{

call plug#begin('~/.vim/plugged')

" Colors and themes
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/lightline.vim'
" Plug 'bling/vim-airline'
Plug 'chriskempson/base16-vim'

" Ruby
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rbenv'
Plug 'vim-ruby/vim-ruby'

" Other languages
Plug 'fatih/vim-go'
Plug 'isRuslan/vim-es6'
Plug 'rodjek/vim-puppet'

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/fzf.vim'

" Vim enhancements
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ludovicchabant/vim-gutentags'
Plug 'moll/vim-bbye'
Plug 'rizzatti/dash.vim'
Plug 'scrooloose/syntastic'
Plug 'tommcdo/vim-lion'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
Plug 'unblevable/quick-scope'

Plug 'scrooloose/nerdtree'

call plug#end()

" }}}

" Simple tweaks {{{

set shell=$SHELL                               " default shell set by environment
set background=dark                            " dark theme
set number                                     " show numbers in side gutter
set nocompatible                               " enable vim specific behaviour
set smartcase                                  " search case setting
set title                                      " titlebar will be buffer filename
set visualbell                                 " don't beep
set noerrorbells                               " don't beep
set hidden                                     " can change buffers even if current is not written
set cursorline                                 " highlight the cursorline
set clipboard^=unnamed                         " adds unnamed to existing values
set list                                       " enable list characters
set listchars=trail:.,extends:#,tab:â–¸\ ,nbsp:. " specify list characters
set ts=2 sts=2 sw=2 expandtab                  " tab-settings

" }}}

" keymappings {{{
let mapleader = "\<Space>"

cmap w!! w !sudo tee % >/dev/null               " if you forget sudo
nnoremap <c-enter> o<esc>                       " insert a newline
nnoremap <leader>W  :%s/\s\+$<cr>               " to clean up trailing whitespace
nnoremap <leader>ev :e $MYVIMRC<cr>             " quickly edit vimrc
nnoremap <leader>h  :nohlsearch<cr>             " toggle highlight
nnoremap <leader>n  :call NumberToggle()<cr>    " toggle relative number
nnoremap <leader>nt :NERDTreeToggle<cr>         " shortcut for NERDTree
nnoremap <leader>q  :Bdelete<CR>                " close buffers sanely
nnoremap <leader>sv :source $MYVIMRC<cr>        " quickly source vimrc
nnoremap <left>     :bnext<cr>                  " jump to next buffer
nnoremap <right>    :bprevious<cr>              " jump to prev buffer
nnoremap Q <nop>                                " don't enter ex mode accidentally

" fzf.vim
if $COMPATIBILITY
  nnoremap <C-p> :Files!<cr>
else
  nnoremap <C-p> :Files<cr>
endif

" }}}

" custom functions {{{

" Toggle relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

" }}}

" gui config {{{

if has("gui")
  set guifont=Sauce\ Code\ Powerline\ Light:h11
endif

" }}}

" nvim config {{{

if has('nvim')
  tnoremap <Esc> <C-\><C-n>
  tnoremap <C-h> <C-\><C-n><C-w>h
  tnoremap <C-j> <C-\><C-n><C-w>j
  tnoremap <C-k> <C-\><C-n><C-w>k
  tnoremap <C-l> <C-\><C-n><C-w>l
endif

" }}}

" colorscheme
colorscheme base16-monokai

" vim-go {{{

let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" }}}

" syntastic {{{

" let g:syntastic_scss_checkers = ['scss_lint']
" let g:syntastic_ruby_checkers = ['rubocop', 'mri']

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0

" }}}

set statusline=%F%m%r%h%w\ [%l/%L,\ %v]\ [%p%%]\ %=[TYPE=%Y]\ [FMT=%{&ff}]\ %{\"[ENC=\".(&fenc==\"\"?&enc:&fenc).\"]\"}

" vim-rspec {{{

let g:rspec_command = "Dispatch! bin/rspec {spec}"
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

" }}}

" quick-scope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" vimscript file settings {{{

augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" }}}

#!/usr/bin/ruby

require 'open3'
require 'optparse'

# Utils
def sanity_check(package)
  abort 'Need package name!' unless package
  parents = used_by(package)
  abort "You cannot uninstall this package, it is required by:
  #{parents.join(', ')}" unless parents.empty?
end

def run_cmd(command)
  output, status = Open3.capture2(command)
  abort unless status.success?
  output.chomp.split
end

# Printing convenience functions
def print_unsafe(unsafe)
  return if unsafe.empty?
  puts 'Cannot remove these packages safely'
  printf "%-20s %s\n", '<Package>', '<Required By>'
  unsafe.each do |dep, parents|
    printf "%-20s %s\n", dep, parents.join(', ')
  end
  puts
end

def print_safe(safe)
  return if safe.empty?
  puts 'Can remove these packages safely'
  safe.each do |package|
    puts package
  end
  puts
  puts 'Run with --force to remove these packages'
end

def print_summary(safe, unsafe)
  print_unsafe(unsafe)
  print_safe(safe)
end

# Brew commands
def dependencies(package)
  run_cmd "brew deps #{package}"
end

def used_by(dependency)
  run_cmd "brew uses --recursive --installed #{dependency}"
end

def force_brew_rm(safe)
  safe.each do |package|
    command = "brew uninstall #{package}"
    output, status = Open3.capture2(command)
    abort unless status.success?
    puts output
  end
end

def map_used_by(deps)
  mapped_deps = Hash[
    deps.map.with_index do |dep, i|
      print "Progress: #{i}/#{deps.length} \r"
      [dep, used_by(dep)]
    end
  ]

  # clear to beginning of line, tidy after oneself
  print "\033[K"

  mapped_deps
end

def analyze(package)
  deps = dependencies(package)
  mapped_parents = map_used_by(deps)

  safe_to_remove = [package]

  not_safe_to_remove = mapped_parents.select do |_dep, parents|
    parents -= [package]
    !parents.empty?
  end

  safe_to_remove += deps - not_safe_to_remove.keys

  [safe_to_remove, not_safe_to_remove]
end

def main(package, force)
  sanity_check(package)
  safe, unsafe = analyze(package)

  if force
    force_brew_rm(safe)
  else
    print_summary(safe, unsafe)
  end
end

# Parse options and populate opts
opts = { force: false, dry_run: false }
OptionParser.new do |o|
  o.on('--force') { |f| opts[:force] = f }
  o.on('--dry-run') { |d| opts[:dry] = d }
  o.parse!
end

main ARGV[0], opts[:force]

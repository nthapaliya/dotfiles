#!/usr/bin/ruby
# -*- ruby -*-

# puts "Using #{__FILE__}"

begin
  require 'hirb'
  puts "railsrc: enabling hirb"

  Hirb.enable pager: !(ENV['PAGER'] && "cat" == ENV['PAGER'].split(File::SEPARATOR).last)

  def hirbv
    Hirb.disable
    Hirb.enable :output => {"ActiveRecord::Base" => {:class => :auto_table, :options => {:vertical => true}}}
  end

  def hirbh
    Hirb.disable
    Hirb.enable :output => {"ActiveRecord::Base" => {:class => :auto_table, :options => {:vertical => false}}}
  end
rescue LoadError => e
  # NOTE: puts interferes with 'robe-mode'
  # puts "Unable to load and/or enable Hirb"
  # puts e.inspect
end

begin
  require ENV['HOME'] + '/.localrailsrc.rb'
rescue LoadError
end

def change_log(stream)
  Rails.logger = Logger.new(stream)
  ActiveRecord::Base.logger = Logger.new(stream)
  ActiveRecord::Base.clear_active_connections!
  ActionController::Base.logger = Logger.new STDOUT
end

def show_log
  change_log(STDOUT)
  nil
end

def hide_log
  change_log(nil)
  nil
end

# def how_to_load_a_rake_task
#   require 'rake'
#   Rails.application.load_tasks
#   Rake::Task['routes'].invoke
#   Rake::Task['routes'].reenable
# end

def show_routes(string = ".*")
  if Rails.version =~ /^4/
    show_routes_fur_zero string
  elsif Rails.version =~ /^3.2/
    show_routes_thee_two string
  elsif Rails.version =~ /^3/
    show_routes_legacy string
  else
    puts "Not implemented for Rails #{Rails.version}"
  end
end

def show_routes_fur_zero match = ".*"
  match = match.to_s
  routes = raw_routes.select {|r| "#{r.name.to_s}\t#{r.verb}\t#{r.path.spec.to_s}\t#{r.requirements[:controller]}##{r.requirements[:action]}" =~ /#{match}/}
  require 'action_dispatch/routing/inspector'
  inspector = ActionDispatch::Routing::RoutesInspector.new(routes)
  routes_formatted = inspector.format(ActionDispatch::Routing::ConsoleFormatter.new, ENV['CONTROLLER'])
    .split(/\n/)
    .reject {|s| s =~ /^\s*$/ }
  puts highlight(routes_formatted, match).join("\n")
end

def show_routes_thee_two match = ".*"
  match = match.to_s
  routes = raw_routes.select {|r| "#{r.name.to_s}\t#{r.verb}\t#{r.path.spec.to_s}" =~ /#{match}/}
  require 'rails/application/route_inspector'
  inspector = Rails::Application::RouteInspector.new
  routes_formatted = inspector.format(routes, ENV['CONTROLLER'])
  puts highlight(routes_formatted, match).join("\n")
end

def raw_routes
  Rails.application.reload_routes!
  Rails.application.routes.routes
end

def highlight strings = [], match = ".*"
  ansi_bold       = "\033[1m"
  ansi_yellow     = "\033[33m"
  ansi_reset      = "\033[0m"

  unless match == ".*"
    strings = strings.map do |r|
      r.gsub!(match, "#{ansi_yellow}#{ansi_bold}#{match}#{ansi_reset}")
    end
  end
  strings
end

def show_routes_legacy(string = nil)

  string = string.to_s

  # lifted from gems/railties-3.0.3/lib/rails/tasks/routes.rake

  Rails.application.reload_routes!
  all_routes = Rails.application.routes.routes

  if ENV['CONTROLLER']
    all_routes = all_routes.select{ |route| route.defaults[:controller] == ENV['CONTROLLER'] }
  end

  routes = all_routes.collect do |route|

    reqs = route.requirements.dup
    reqs[:to] = route.app unless route.app.class.name.to_s =~ /^ActionDispatch::Routing/
    reqs = if reqs.empty?
             ""
           elsif reqs[:controller]
             reqs[:controller] + '#' + reqs[:action]
           else
             reqs.inspect
           end

    {:name => route.name.to_s, :verb => route.verb.to_s, :path => route.path, :reqs => reqs}
  end

  routes.reject! { |r| r[:path] =~ %r{/rails/info/properties} } # Skip the route if it's internal info route

  name_width = routes.map{ |r| r[:name].length }.max
  verb_width = routes.map{ |r| r[:verb].length }.max
  path_width = routes.map{ |r| r[:path].length }.max

  ansi_bold       = "\033[1m"
  ansi_reset      = "\033[0m"
  ansi_lgray    = "\033[0;37m"
  ansi_gray     = "\033[1;30m"

  routes.each do |r|
    if string.nil? or r[:path].index(string) or r[:name].index(string) or r[:reqs].index(string)
      line = [
              r[:name].rjust(name_width),
              r[:verb].ljust(verb_width),
              r[:path].ljust(path_width),
              r[:reqs]
             ].join(' ')

      unless string.nil?
        line.gsub!(string, "#{ansi_bold}#{string}#{ansi_reset}")
      end

      puts line
    end
  end
  nil
end

module ActiveRecord
  class Relation
    def to_sql_formatted
      to_sql.gsub(/([A-Z][A-Z\s]+)/) { |m| "\n#{m}" }
    end

    def most(field, having=0)
      group(field).select("count(#{field}) AS total").having("total >= #{having}").order("total DESC")
    end
  end
end

#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'net/http'
require 'uri'

def github_remote_information
  re = %r{(git@github.com|https://github.com/):(?<owner>.+)/(?<repo_name>.+)$}
  remote = `git config remote.origin.url`
           .chomp
           .match(re)

  exit 1 if remote.nil?

  [remote[:owner], remote[:repo_name]]
end

key = JSON.parse(File.read("#{Dir.home}/creds.json"))['GITHUB_API_KEY']

rev_parse_args = ARGV.empty? ? 'HEAD' : ARGV.join(' ')

hashes = `git rev-parse #{rev_parse_args}`.chomp.split("\n")

owner, repo_name = github_remote_information

fragment = hashes.map do |hash|
  "_#{hash}: object(expression: \"#{hash}\") {
        ... on Commit {
          associatedPullRequests(first: 5) {
            nodes {
              url
            }
          }
        }
      }
      "
end.join("\n")

query_string = "{
  repository(owner: \"#{owner}\", name: \"#{repo_name}\") {
  #{fragment}
  }
 }
"

uri = URI.parse('https://api.github.com/graphql')
request = Net::HTTP::Post.new(uri)
request['Authorization'] = "bearer #{key}"
request.body = JSON.dump(query: query_string)

response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
  http.request(request)
end

parsed_response = JSON.parse(response.body)

urls = parsed_response
       .dig('data', 'repository')
       .values
       .map { |v| v&.dig('associatedPullRequests', 'nodes', 0, 'url') }

if urls.length > 1
  puts urls
elsif urls.length == 1 && !urls.first.nil? && urls.first != 'null'
  system("open #{urls.first}")
else
  exit 1
end

#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'net/http'
require 'uri'

def github_remote_information
  re = %r{(git@github.com|https://github.com/):(?<owner>.+)/(?<repo_name>.+)$}
  remote = `git config remote.origin.url`
           .chomp
           .match(re)

  exit 1 if remote.nil?

  [remote[:owner], remote[:repo_name]]
end

key = JSON.parse(File.read("#{Dir.home}/creds.json"))['GITHUB_API_KEY']

hash = `git rev-parse #{ARGV.first || 'HEAD'}`.chomp

owner, repo_name = github_remote_information

query_string = "{
  repository(owner: \"#{owner}\", name: \"#{repo_name}\") {
    object(expression: \"#{hash}\") {
      ... on Commit {
        status {
          state
          contexts {
            state
            targetUrl
          }
        }
      }
    }
  }
}
"

uri = URI.parse('https://api.github.com/graphql')
request = Net::HTTP::Post.new(uri)
request['Authorization'] = "bearer #{key}"
request.body = JSON.dump(query: query_string)

response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
  http.request(request)
end

parsed_response = JSON.parse(response.body)

nested_keys = [
  'data',
  'repository',
  'object',
  'status',
  'contexts',
  0,
  'targetUrl'
]

url = parsed_response.dig(*nested_keys)

if url && url != 'null'
  system("open #{url}")
else
  exit 1
end
